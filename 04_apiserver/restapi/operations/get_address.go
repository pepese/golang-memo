// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// GetAddressHandlerFunc turns a function with the right signature into a get address handler
type GetAddressHandlerFunc func(GetAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAddressHandlerFunc) Handle(params GetAddressParams) middleware.Responder {
	return fn(params)
}

// GetAddressHandler interface for that can handle valid get address params
type GetAddressHandler interface {
	Handle(GetAddressParams) middleware.Responder
}

// NewGetAddress creates a new http.Handler for the get address operation
func NewGetAddress(ctx *middleware.Context, handler GetAddressHandler) *GetAddress {
	return &GetAddress{Context: ctx, Handler: handler}
}

/*GetAddress swagger:route GET /address getAddress

GetAddress get address API

*/
type GetAddress struct {
	Context *middleware.Context
	Handler GetAddressHandler
}

func (o *GetAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAddressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetAddressOKBody get address o k body
// swagger:model GetAddressOKBody
type GetAddressOKBody struct {

	// message
	Message string `json:"message,omitempty"`

	// results
	Results []*ResultsItems0 `json:"results"`

	// status
	Status int64 `json:"status,omitempty"`
}

// Validate validates this get address o k body
func (o *GetAddressOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAddressOKBody) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAddressOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAddressOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAddressOKBody) UnmarshalBinary(b []byte) error {
	var res GetAddressOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ResultsItems0 results items0
// swagger:model ResultsItems0
type ResultsItems0 struct {

	// address1
	Address1 string `json:"address1,omitempty"`

	// address2
	Address2 string `json:"address2,omitempty"`

	// address3
	Address3 string `json:"address3,omitempty"`

	// kana1
	Kana1 string `json:"kana1,omitempty"`

	// kana2
	Kana2 string `json:"kana2,omitempty"`

	// kana3
	Kana3 string `json:"kana3,omitempty"`

	// prefcode
	Prefcode string `json:"prefcode,omitempty"`

	// zipcode
	Zipcode string `json:"zipcode,omitempty"`
}

// Validate validates this results items0
func (o *ResultsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ResultsItems0) UnmarshalBinary(b []byte) error {
	var res ResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
